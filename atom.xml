<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ohhh&#39;s Blog</title>
  
  <subtitle>还是偶尔想要伟大</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-10T14:43:54.150Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>mingfu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于java实现简单的邮件发送和读取</title>
    <link href="http://yoursite.com/2020/07/10/%E5%9F%BA%E4%BA%8Ejava%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%92%8C%E8%AF%BB%E5%8F%96/"/>
    <id>http://yoursite.com/2020/07/10/%E5%9F%BA%E4%BA%8Ejava%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%92%8C%E8%AF%BB%E5%8F%96/</id>
    <published>2020-07-10T14:24:07.000Z</published>
    <updated>2020-07-10T14:43:54.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于java实现简单的邮件发送和读取"><a href="#基于java实现简单的邮件发送和读取" class="headerlink" title="基于java实现简单的邮件发送和读取"></a>基于java实现简单的邮件发送和读取</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是计算机网络课程的实验课设，使用java socket发送邮件并且不适用java的mail，基于swing图形实现了一些功能，特地以此作为笔记以备日后查阅。</p><h3 id="电子邮件概述"><a href="#电子邮件概述" class="headerlink" title="电子邮件概述"></a>电子邮件概述</h3><p>电子邮件系统具有三个主要组成构件，即用户代理、邮件服务器以及邮件协议。主要的应用层协议就是简单邮件传送协议SMTP(Simple Mail Transfer Protocol)、邮局协议POP3(Post Office Protocol)以及1993年提出的通用互联网邮件扩充MIME(Multipurpose Internet Mail Extensions)。</p><p><strong>邮件服务器</strong>是电子邮件基础结构的核心，其功能是发送和接收邮件，同时还向发件人报告邮件传送的结果（已交付、被拒绝、丢失等），按照客户服务器方式工作。</p><p>邮件服务器使用两种不同的协议。一种协议用于用户代理向邮件服务器发送邮件或者在邮件服务器之间发送邮件，如本实验中的SMTP；另一种协议用于用户代理从邮件服务器读取邮件，如邮局协议POP3。</p><p><strong>用户代理UA（User Agent）</strong>是用户与电子邮件系统的接口，大多数情况下它就是运行在用户电脑中的一个程序。因此用户代理又称为电子邮件客户端软件。用户代理向用户提供一个友好的接口（目前主要是窗口界面）来发送和接收邮件。</p><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/%E5%9B%BE%E7%89%871.png" alt=""></p><h3 id="邮件发送与SMTP协议"><a href="#邮件发送与SMTP协议" class="headerlink" title="邮件发送与SMTP协议"></a>邮件发送与SMTP协议</h3><p>SMTP规定了在两个相互通信的SMTP进程之间应如何交换信息。SMTP规定了14条命令和21种应答信息(部分可见参考与附录)。每条命令用几个字母组成，每一种应答信息一百只有一行，有3位数字的代码开始。</p><p>通过Windows命令行下的Telnet，可以简单的实现SMTP发送邮件的简单过程。</p><p>1.建立TCP连接：telnet smtp.qq.com 25 &lt;地址,熟知端口&gt;</p><p>2.客户端发送HELO命令标识发件人自己的身份，并得到服务器返回的状态</p><p>3.客户端AUTH LOGIN登陆，Base64编码用户的邮件地址和密码</p><p>4.邮件传送是从MAIL命令开始的，传送邮件的主体</p><p>5.以<CR><LF>.<CR><LF>作为邮件内容的结束</p><p>6.连接释放QUIT命令</p><h4 id="使用telnet发送邮件"><a href="#使用telnet发送邮件" class="headerlink" title="使用telnet发送邮件"></a>使用telnet发送邮件</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C:Client(本地客户) S:Server(SMTP服务器）</span></span><br><span class="line"><span class="comment">//以下为命令行对话框</span></span><br><span class="line">C: HELO PINK         <span class="comment">// HELO后的内容任意 warn.1</span></span><br><span class="line">S: <span class="number">250</span>-newxmesmtplogicsvrszc7.qq.com<span class="number">-100.77</span><span class="number">.8</span><span class="number">.215</span><span class="number">-30206205</span>           </span><br><span class="line">  <span class="number">250</span>-SIZE <span class="number">73400320</span>      <span class="comment">// qq的stmp返回的是三行                                </span></span><br><span class="line">  <span class="number">250</span> OK             <span class="comment">//  其他的smtp一般都返回一行</span></span><br><span class="line">C: AUTH LOGIN          <span class="comment">//  验证登陆</span></span><br><span class="line">S: <span class="number">334</span> VXNlcm5hbWU6  </span><br><span class="line">C: Base64 of username      <span class="comment">// 输入经过base64加密后的用户名</span></span><br><span class="line">S: <span class="number">334</span> UGFzc3dvcmQ6 </span><br><span class="line">C: Base64 of password      <span class="comment">// 输入经过base64加密后的密码or授权码)</span></span><br><span class="line">S: <span class="number">235</span> Authentication successful </span><br><span class="line">C: MAIL FROM:&lt;youemail&gt;    <span class="comment">// 发件人 warn.2</span></span><br><span class="line">S: <span class="number">250</span> OK</span><br><span class="line">C: RCPT TO:&lt;ReceiverEmail&gt; <span class="comment">// 收件人</span></span><br><span class="line">S: <span class="number">250</span> OK</span><br><span class="line">C: DATA              <span class="comment">// 邮件</span></span><br><span class="line">S: <span class="number">354</span> End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;. <span class="comment">// 以回车换行+ . +回车换行结束</span></span><br><span class="line">C: TO:</span><br><span class="line">C: SUBJECT:</span><br><span class="line">C:                   <span class="comment">// CRLF 表示以下为邮件内容 warn.3</span></span><br><span class="line">C: ni,hao </span><br><span class="line">C: good bye!</span><br><span class="line">C: .                  <span class="comment">// 表结束</span></span><br><span class="line">S: <span class="number">250</span> OK: queued as.</span><br></pre></td></tr></table></figure><p><strong><em>注意(warn)</em></strong> 1.很奇怪的输入问题，输入过程回退可能会返回502 Invalid(见错误码)，输入时需注意。</p><p>2.MAIL FROM和RCPT TO命令的格式容易出错，使用&lt;&gt;(虽然很多博客并没有&lt;&gt;，我怀疑他们的是错的)。</p><p>3.此处需要有一个CRLF</p><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/%E5%9B%BE%E7%89%873.png" alt=""></p><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/%E5%9B%BE%E7%89%872.png" alt=""></p><h3 id="邮件读取与POP3协议"><a href="#邮件读取与POP3协议" class="headerlink" title="邮件读取与POP3协议"></a>邮件读取与POP3协议</h3><p>POP协议是一种用于接收电子邮件的协议，发送端的邮件根据SMTP协议将被转发给一直处于插电状态的POP服务器。客户端再根据POP协议从POP服务器接收对方发来的邮件。在这个过程中，为了防止他人盗窃邮件内容，还要进行用户验证。具体过程是：邮件发送到服务器上，电子邮件客户端调用邮件客户机程序以连接服务器，并下载所有未阅读的电子邮件。这种离线访问模式是一种存储转发服务，将邮件从邮件服务器端送到个人终端机器上，一般是PC机或 MAC。一旦邮件发送到 PC 机或MAC上，邮件服务器上的邮件将会被删除。但目前的POP3邮件服务器大都可以“只下载邮件，服务器端并不删除”，也就是改进的POP3协议。</p><h4 id="使用telnet读取邮件"><a href="#使用telnet读取邮件" class="headerlink" title="使用telnet读取邮件"></a>使用telnet读取邮件</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C:Client(本地客户) S:Server(SMTP服务器）</span></span><br><span class="line"><span class="comment">//以下为命令行对话框</span></span><br><span class="line">C:telent pop.qq.com <span class="number">110</span></span><br><span class="line">C: USER username@qq.com</span><br><span class="line">S: +OK           </span><br><span class="line">C: PASS password</span><br><span class="line">S：+OK <span class="number">25</span> message(s) [<span class="number">8521743</span> <span class="keyword">byte</span>(s)]</span><br><span class="line">C: STAT</span><br><span class="line">S: +OK <span class="number">25</span> <span class="number">8521743</span>  <span class="comment">//请求关于邮箱的统计资料25--邮件总数 邮件大小</span></span><br><span class="line">C：RETR  + 获取的邮件序号  <span class="comment">//获取邮寄原文 序号：新邮件&gt;旧邮件</span></span><br><span class="line">S：+OK <span class="number">34176</span> octets <span class="comment">// 邮件大小 </span></span><br><span class="line">S：该邮件的原文</span><br></pre></td></tr></table></figure><h3 id="电子邮件的信息格式"><a href="#电子邮件的信息格式" class="headerlink" title="电子邮件的信息格式"></a>电子邮件的信息格式</h3><p>MIME, 全称为“Multipurpose Internet Mail Extensions”, 比较确切的中文名称为“多用途互联网邮件扩展”。它是当前广泛应用的一种电子邮件技术规范，基本内容定义于RFC 2045-2049。自然，MIME邮件就是符合MIME规范的电子邮件，或者说根据MIME规范编码而成的电子邮件。在MIME出台之前，使用RFC 822只能发送基本的ASCII码文本信息，邮件内容如果要包括二进制文件、声音和动画等，实现起来非常困难。MIME提供了一种可以在邮件中附加多种不同编码文件的方法，弥补了原来的信息格式的不足。</p><p>邮件头包含了发件人、收件人、主题、时间、MIME版本、内容的类型、内容的传输编码方式等重要信息。每条信息称为一个域，由域名后加冒号（“ : ”）和信息内容构成，可以是一行，也可以占用多行。域的首行必须顶头写(即左边不能有空白字符（空格和制表符））；续行则必须以空白字符打头，且第一个空白字符不是信息本身固有的，解码时要过滤掉。另外，邮件头中不允许出现空行。</p><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/4.png" alt="MIME电子邮件头部"></p><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/5.png" alt="MIME电子邮件段头"></p><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/6.png" alt="MIME电子邮件主体格式"></p><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/7.png" alt="MIME电子邮件样例"></p><p>如果在邮件中要添加附件，必须定义multipart/mixed段；如果存在内嵌资源，至少要定义multipart/related段；如果纯文本与超文本共存，至少要定义multipart/alternative段。其实很容易察觉，MIME邮件就像我们实体信件一样，信封注明了一些信息。</p><h1 id="设计与实现"><a href="#设计与实现" class="headerlink" title="设计与实现"></a>设计与实现</h1><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/8.png" alt="总体框架"></p><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/9.png" alt=""></p><h3 id="Java-socket编程使用"><a href="#Java-socket编程使用" class="headerlink" title="Java socket编程使用"></a>Java socket编程使用</h3><p>关于java的socket编程，可以看到大致流程是这样的，在建立socket连接后，问题转变为如何使用smtp和pop协议对流进行操作。在连接过程中通过输入输出流读取和发送指令。</p><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/10.png" alt="java socket"></p><h3 id="登陆页LoginPage"><a href="#登陆页LoginPage" class="headerlink" title="登陆页LoginPage"></a>登陆页LoginPage</h3><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/11.png" alt="login"></p><p>将登陆功能封装到User类中,使用java的socket连接SMTP服务器，并且捕获socket的未知主机异常(UnknownHostException)、连接异常ConnectException、连接超时异常(SocketTimeoutException)，并且得到socket的输入流和输出流。根据HELO的返回是不是250(不是说没服务器忙于其他)和AUTH LOGIN命令的返回码是不是(235说明用户名密码正确)确定登陆是否成功，然后释放连接。 </p><h3 id="主页面mainPage"><a href="#主页面mainPage" class="headerlink" title="主页面mainPage"></a>主页面mainPage</h3><p>此模块绘制页面，主要做一些按钮的监听事件和负责显示文字。</p><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/12.png" alt="main"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">JButton sendButton = <span class="keyword">new</span> JButton(<span class="string">"发送"</span>);</span><br><span class="line">sendButton.setIcon(new ImageIcon(smtpPage.class.getResource("/imagine/发送.png")));</span><br><span class="line">sendButton.setFont(<span class="keyword">new</span> Font(<span class="string">"等线"</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line">sendButton.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isRight(revtextField.getText())) &#123;</span><br><span class="line">String subject = subjectTextField.getText();   <span class="comment">// 抄送 和 主题 </span></span><br><span class="line">String body = contentArea.getText(),Message = <span class="keyword">new</span> String(<span class="string">"&lt;html&gt;&lt;h1&gt;&lt;font color='black'&gt;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> signal = <span class="keyword">false</span>;            </span><br><span class="line"><span class="keyword">int</span> Option = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(subjectTextField.getText().length()==<span class="number">0</span>) &#123;</span><br><span class="line">Message += <span class="string">"主题为空, "</span>;</span><br><span class="line">signal = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(contentArea.getText().length()==<span class="number">0</span>) &#123;</span><br><span class="line">    Message += <span class="string">"邮件内容为空, "</span>;</span><br><span class="line">    signal = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(signal)  Option = JOptionPane.showConfirmDialog(<span class="keyword">null</span>,Message+<span class="string">"确定不填写吗？？&lt;/font&gt;&lt;/h1&gt;&lt;/html&gt;"</span>,<span class="string">"提示"</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span>(Option == <span class="number">0</span>) &#123;  <span class="comment">// 选择空的内容为Yes</span></span><br><span class="line">  String showMessage = <span class="keyword">new</span>  String();</span><br><span class="line">  Mail.setMailContent(revtextField.getText(),subject, body);</span><br><span class="line">  showMessage = returnConnet(<span class="keyword">new</span> Send(auth).connect(getMail()));</span><br><span class="line">  JOptionPane.showMessageDialog(<span class="keyword">null</span>,showMessage,<span class="string">"消息"</span>,<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> </span><br><span class="line">&#123;   <span class="comment">// 用户名不含@</span></span><br><span class="line"> JOptionPane.showMessageDialog(<span class="keyword">null</span>,<span class="string">"用户名不正确，请检查重试."</span>,<span class="string">"错误"</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/13.png" alt="mainPage"></p><h3 id="写信页SmtpPage"><a href="#写信页SmtpPage" class="headerlink" title="写信页SmtpPage"></a>写信页SmtpPage</h3><p>这部分将实现SMTP发送邮件功能，数据流可以看主体框架得到。</p><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/14.png" alt="smtp"></p><p>通过将发送邮件封装成send类，通过图形部分得到收件人、主题、内容、附件；</p><p>在send类中实现邮件的发送。监听发送按钮，触发点击时，捕获各个文本域信息传递给send类发送。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">补充</span><br></pre></td></tr></table></figure><p>首先，由于已经使用账号登陆成功，所以接下来发送邮件不必去做检验账号和密码处理，但是socket的异仍需要捕获。简单的流程框架就是使用telnet发送邮件的流程。不过需要处理的是：对各个部分的编码、以及带附件以后采用mixed格式，那么将包含几个multipart，分别由于–boundary分割开，在每一个multipart中都将在此声明一个子part-boundary用于在此multipart中分割。另外需要声明此部分内容的文本格式（假如是文本的话），以及编码方式。然后，在下一个multipart就可以类似的加入附件，可参考以下流程图。</p><p>对于正常不带附件的邮件，那么只需要在一个part中描述编码的内容即可，当然也可以多个multipart的文本，不过对于实现来说容易，但是在pop解析部分变得异常艰难。</p><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/15.png" alt="smtp"></p><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/16.png" alt="smtpPage"></p><h3 id="读信页popPage"><a href="#读信页popPage" class="headerlink" title="读信页popPage"></a>读信页popPage</h3><p>此模块堪称为最难部分亦是最复杂部分，不亚于写一个编译词法语法分析。</p><p>首先由上述实验内容部分可以得到MIME邮件的基本格式，这其中首先要对smtp的命令关键字进行识别，然后在string中截取出文字格式、编码方式、boundary、filename、multipart-type等内容，由于邮件都是以–mainboundary–和<CR><LF>.<CR><LF>结束，可作为一切循环的终止条件，以防进入死循环。</p><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/17.png" alt="pop"></p><p>由于各种用户代理之间的差异，无可避免的存在了多种情况，如编码和未编码，编码中又有UTF-8和gb2312、gbk等，有一些是没有双引号”修饰的；未编码可能就相对简单。而其他部分也或多或少存在相似的处理。</p><p>截取from的type和codetype代码。</p><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/18.png" alt="pop"></p><p>邮件是可以自己给自己发送的，默认附件是自动下载的，如上打开附件没有问题。</p><p>尝试着解析其他人发来的邮件，此部分堪称最难，由于各种不同的用户代理采用都是MIME，但是很多细节格式并不一致，比如from、subject、boundary的位置顺序并不是固定的。实话说，解析邮件不亚于一个编译器。</p><p>以下解析其他人发来的邮件结果。</p><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/19.png" alt="other"></p><p>一封带附件的邮件原文，可以观察boundary和partboundary。</p><p><img src="https://pink-1301702299.cos.ap-chengdu.myqcloud.com/blog/email/20.png" alt="other"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>总体而言，写了还是有些收获的。</p><blockquote><p>台北盆地最大的哀愁就是  比不来华北平原唱的惆怅</p></blockquote><p><a href="https://github.com/pinkkmin/SNAKEmail" target="_blank" rel="noopener">github</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/NEUChords/article/details/92090423" target="_blank" rel="noopener">电子邮件</a></p><p><a href="https://serversmtp.com/smtp-error/" target="_blank" rel="noopener">SMTP errors and reply codes</a></p><p><a href="https://blog.csdn.net/chenfei_5201213/article/details/10138969" target="_blank" rel="noopener">SMTP错误码/建议解决方法</a></p><p><a href="https://www.w3school.com.cn/media/media_mimeref.asp" target="_blank" rel="noopener">MIME 参考手册</a></p><p><a href="https://blog.csdn.net/weixin_37958284/article/details/77186279" target="_blank" rel="noopener">电子邮件基本格式（MIME格式）</a></p><p><a href="http://cn.voidcc.com/question/p-zxjbxljv-oh.html" target="_blank" rel="noopener">解码的UTF8电子邮件标题</a></p><p><a href="http://cn.voidcc.com/question/p-cdwnkfgp-pa.html" target="_blank" rel="noopener">将电子邮件主题从“？UTF-8？…”转换为字符串？</a></p><p><a href="https://blog.csdn.net/iteye_18655/article/details/81400129" target="_blank" rel="noopener">Socket收发邮件–SMTP和POP3</a></p><p><a href="https://www.cnblogs.com/sdgwc/p/3324368.html" target="_blank" rel="noopener">SMTP邮件传输协议发送邮件和附件</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于java实现简单的邮件发送和读取&quot;&gt;&lt;a href=&quot;#基于java实现简单的邮件发送和读取&quot; class=&quot;headerlink&quot; title=&quot;基于java实现简单的邮件发送和读取&quot;&gt;&lt;/a&gt;基于java实现简单的邮件发送和读取&lt;/h1&gt;&lt;h1 id=&quot;前</summary>
      
    
    
    
    <category term="大学课程" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B/"/>
    
    
    <category term="计网实验课设" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%BD%91%E5%AE%9E%E9%AA%8C%E8%AF%BE%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>月份与星期的来历</title>
    <link href="http://yoursite.com/2020/07/10/%E6%9C%88%E4%BB%BD%E4%B8%8E%E6%98%9F%E6%9C%9F%E7%9A%84%E6%9D%A5%E5%8E%86/"/>
    <id>http://yoursite.com/2020/07/10/%E6%9C%88%E4%BB%BD%E4%B8%8E%E6%98%9F%E6%9C%9F%E7%9A%84%E6%9D%A5%E5%8E%86/</id>
    <published>2020-07-10T05:24:07.000Z</published>
    <updated>2020-07-10T05:25:42.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="月份"><a href="#月份" class="headerlink" title="月份"></a>月份</h1><p>公历一年有12个月，公历起源于古罗马历法。罗马的英语原本只有10个月，古罗马皇帝决定增加两个月至末尾，后来的凯撒大帝<code>Gaius Julius Caesar</code>将此2月 移至年初，即1、2月，原本的1、2月顺延为3、4月。</p><h3 id="January"><a href="#January" class="headerlink" title="January"></a>January</h3><p>在罗马传说中 ，有一位叫雅努斯（Janus）的守护神，他是罗马人的门神，生有两张脸，一张向前，回首过往，一张向后，眺望未来。雅努斯也是掌管开始和终结的神，罗马人往往会在结婚、出生等场合祭祀这位神祗。雅努斯是天宫的守门人，每天把天空的大门打开，让阳光普照大地；黄昏时就把大门关上，黑夜也随之降临。罗马人把一月称为Januarius(mensis)，蕴含“Janus之月”之意。</p><h3 id="February"><a href="#February" class="headerlink" title="February"></a>February</h3><p>每年的2月初，罗马人都要杀牲饮酒，欢庆菲勃卢姆节。这一天，人们要忏悔自己过去一年的罪过，洗刷自己的灵魂，以祈求神明的饶恕，使自己成为一个贞洁的人。英语2月February，便是由拉丁文 Februar-ius（即菲勃卢姆节）演变而来。</p><h3 id="March"><a href="#March" class="headerlink" title="March"></a>March</h3><p>3月，原是罗马旧历法的1月，新年的开始。凯撒大帝改革历法后，原来的1月变成3月，但罗马人仍然把3月看做是一年的开始。另外，按照传统习惯，3月是每年出征远战的季节。为了纪念战神玛尔斯(宙斯和赫拉的儿子阿瑞斯)，人们便把这位战神的拉丁Mars名字作为3月的月名。</p><h3 id="April"><a href="#April" class="headerlink" title="April"></a>April</h3><p>罗马的4月，正是鲜花初绽，大地回春的美好季节，也是罗马人纪念维纳斯的月份。英文4月April便由拉丁文Aprilis（即开花的日子）演变而来。而拉丁文之所以写成Aprilis，正是来源于希腊爱与美之女神的名字——阿芙罗狄忒Aphrodite（其罗马名维纳斯），她是爱情和女性美的象征，传说正是因为她，世上才有了玫瑰花</p><h3 id="May"><a href="#May" class="headerlink" title="May"></a>May</h3><p>罗马神话中的女神玛雅Maia，专门司管春天和生命。为了纪念这位女神 ，罗马人便用她的名字——拉丁文 Maius命名5月，英文5月May便由这位女神的名字演变而来。</p><h3 id="June"><a href="#June" class="headerlink" title="June"></a>June</h3><p>罗马神话中的朱诺，就是希腊神话中的天后赫拉，她是宙斯的妻子，也是司管婚姻和生育的女神。古罗马人对她十分崇敬，便把6月以她的名字——拉丁文Junius来命名。因为6月是赫拉守护的月份，据说这个月结婚的人都能得到幸福，就有了六月新娘（June Bride）的说法。</p><h3 id="July"><a href="#July" class="headerlink" title="July"></a>July</h3><p>罗马统治者朱里斯·凯撒（Julius Caesar）被刺身亡后，著名的罗马将军安东尼建议将凯撒大帝诞生的7月，用凯撒的名字——拉丁文Julius命名之。这一建议得到了元老院的通过。英语7月July 由此演变而来。</p><h3 id="August"><a href="#August" class="headerlink" title="August"></a>August</h3><p>朱里斯·凯撒（Julius Caesar）死后，由他的甥孙屋大维续任罗马皇帝。为了和凯撒齐名，他也想用自己的名字来命名一个月份。他的生日在9月，但他选定8月。因为他登基后，罗马元老院在8月授予他Augustus（奥古斯都）的尊号。于是，他决定用这个尊号来命名8月。原来8月比7月少一天，为了和凯撒平起平坐，他又决定从2月中抽出一天加在8月上。从此，2月便少了一天。英语8月August便由这位皇帝的拉丁语尊号演变而来。</p><h3 id="September"><a href="#September" class="headerlink" title="September"></a>September</h3><p>旧历的7月，正是凯撒大帝改革历法后的9月，拉丁文 Septem是“7”的意思。虽然历法改革了，但人们仍袭用旧名称来称呼9月。英语9月September，便由此演变而来。</p><h3 id="October"><a href="#October" class="headerlink" title="October"></a>October</h3><p>英语中的十月，来自拉丁文Octo，即“八”的意思，也是根据旧历法来的。</p><h3 id="November"><a href="#November" class="headerlink" title="November"></a>November</h3><p>罗马皇帝奥古斯都和凯撒都有了自己名字命名的月份，罗马市民和元老院要求当时的罗马皇帝梯比里乌斯用其名命名11月。但梯比里乌斯没有同意，他明智地对大家说，如果罗马每个皇帝都用自己的名字来命名月份，那么出现了第13个皇帝怎么办？于是，11月仍然保留着旧称 Novem，即拉丁文“9”的意思。英语11月November便由此演变而来。</p><h3 id="December"><a href="#December" class="headerlink" title="December"></a>December</h3><p>罗马皇帝琉西乌斯要把一年中最后一个月用他情妇的Amagonius的名字来命名，但遭但元老院的反对。于是，12月仍然沿用旧名Decem，即拉丁文“10”的意思。英语12月December，便由此演变而来.</p><h1 id="星期"><a href="#星期" class="headerlink" title="星期"></a>星期</h1><h3 id="Sunday-Sun"><a href="#Sunday-Sun" class="headerlink" title="Sunday(Sun.)"></a>Sunday(Sun.)</h3><p>Day of the Sun(太阳日，星期日)。是耶酥复活日，因此西方把这一天看作最神圣的日子，称之为“安息日”或“主日”。公元4世纪，在指定罗马历法时，罗马皇帝君士坦丁大帝把这一天定为合法假日，后被世界各国广泛采用。 Sunday 星期日：Sunday在古英文中的意思是sun’s day(属于太阳的日子)。 对基督徒而言, 星期日是「安息日」, 因为耶稣复活的日子是在星期日。约从公元4世纪起，罗马天主教会就将Sunday定为假日，在这一天禁止任何人工作，教徒都得停止一切娱乐活动，上教堂去做礼拜。直到今日, 世界上大多数的国家都以Sunday为星期例假日。</p><h3 id="Monday-Mon"><a href="#Monday-Mon" class="headerlink" title="Monday(Mon.)"></a>Monday(Mon.)</h3><p>Day of the Moon(月亮日)。在古英语中写作Monandoeg, 即 day of the moon，拉丁语为Lunaedies。 在古罗马神话中，月亮神为太阳神之妻，因此一周中，也应有她一天。 Monday 星期一 ：在古罗马神话中， Monday的意思是moon day(属于月亮的日子), 因为西方人把这一天献给月之女神。古时候西方人相信, 月的盈亏会影响农作物的生长, 也会影响医疗。此外, 尚有所谓的Blue Monday。 Blue是“忧郁”的意思。星期一是一周工作的开始, 没得玩了, 所以心情不好,。不少国家将星期一当作 family washday(家庭洗濯日), 那是由来已久的习俗。</p><h3 id="Tuesday-Tues"><a href="#Tuesday-Tues" class="headerlink" title="Tuesday(Tues.)"></a>Tuesday(Tues.)</h3><p>Day of the Mars(火星日)。这一天是为了纪念战神Tyr而由他的名字命名的。古英语中Tyr的名字写作Tiw。Tiwesdoeg的意思是Tiw’s day(战神日)，它是由拉丁语dies Martis(即 day of Mars)翻译而成的。Tyr原是北欧神话里的战神，也是盎格鲁—撒克逊人的神。他用自己的手作诱饵，捉住了狼精，他的手却被狼精咬掉了。为了纪念他这种勇敢的精神，使用他的名字来命名Tuesday这一天。 值得一提的是，星期二Mars在法语中作Mardi。Mardi Gras表示四旬斋前的狂欢节(星期二)，是天主教徒在复活节之前必须的斋戒仪式。斋戒之前当然要大吃大喝一番了，因此这一天又叫Fat Tuesday。Mardi Gras Day是美国最大的嘉年华会，这一持续两周的盛会每年都会在新奥尔良举行，有数百万人参加。</p><h3 id="Wednesday-Wed"><a href="#Wednesday-Wed" class="headerlink" title="Wednesday(Wed.)"></a>Wednesday(Wed.)</h3><p>Wednesday在古英文中的意思是Woden’s day。Woden是北欧诸神之父。为制服狼精而牺牲自己一只手的Tyr, 就是他的儿子。Woden领导神族跟巨人族作战, 他曾牺牲自己锐利的右眼, 跟巨人族换取「智能」的甘泉。他也曾深入地层, 从巨人族那里偷取「诗」的美酒。西方人为了追念这位主神, 就根据他的名字创造了Wednesday这个字。Wednesday(Wed.)—Day of the Mercury(水星日)。这一天是以北欧神话中掌管文化、艺术、战争、死亡的神Woden的名字命名的。Woden是战神Thor的父亲;他勇敢地将在宇宙间制造混乱的“混沌”(Chaos)杀死，并将阵亡将士的英灵请到天界，使他们享受天伦之乐。为怀念他，人们用他的名字命名了Wednesday这一天。 Mercury不但是各路神灵的使者，还是商业、旅行及盗窃的守护神。后来，日尔曼民族用他们自己的神Woden(挪威神话里的Odin)取代了墨丘里神，这就是Wednesday的起源。</p><h3 id="Thursday"><a href="#Thursday" class="headerlink" title="Thursday"></a>Thursday</h3><p>Day of Jupiter(木星日)。这一天是用北欧神话中Thor的名字来命名的。Thor是掌管雷电之神(God of Thunder and Lightning)。他常驾驭着由山羊拉的战车奔驰在天际间，风儿飕飕成了闪电，车轮滚滚成了雷鸣。Thursday在古英文中意思是Thor’s day。Thor是北欧神话中的雷神, 经常带着一把大铁锤。相传有一次, 他的大铁锤被一位叫Thrym的巨人偷走了。Thrym 扬言, 除非神族答应把美丽的爱神Freya嫁给他做为交换。然而Freya抵死不从, 于是神族想了一个办法, 由Thor男扮女装穿Freya的衣服, 假装嫁给他, Thrym不疑有诈, 把铁锤交给新娘。于是Thor抢回了自己的武器, 也立即把Thrym 给杀了。</p><h3 id="Friday-Fri"><a href="#Friday-Fri" class="headerlink" title="Friday(Fri.)"></a>Friday(Fri.)</h3><p>Day of Venus(金星日)。Friday在古英语中写作Frigedoeg。后来挪威人用他们自己的爱神Frigg(Odin的妻子)取代了维纳斯的地位，所以今天的星期五就是Friday了。 Frigga是掌管婚姻的女神。她是Woden之妻，Thor之母。因为以Woden之名命名了Wednesday,以Thor之名命名了Thursday，为了抚慰她本人，便以她的名Frigga命名了Friday。 Friday 星期五：Friday在古英文中意思是Frigg’s day。Frigg是北欧神话中主司婚姻和生育的女神, 也是Woden的妻子。相传她平日身披闪耀白长袍, 住在水晶宫中, 和侍女们一起编织五颜六色的彩云。 对于北欧人而言, 星期五是幸运的日子。然而对基督徒来说却是相反的, 因为耶稣受难日正好是星期五。</p><h3 id="Saturday-Sat"><a href="#Saturday-Sat" class="headerlink" title="Saturday(Sat.)"></a>Saturday(Sat.)</h3><p>Day of Saturn(土星日)。这是一星期中最后一天，它是由掌管农业之神，罗马主神朱庇特的父亲(the god of Agriculture, father of Jupiter)Saturn的名字命名的，也是英语直接用罗马神话中神名来命名星期名称的唯一的一天，其余几天则是以北欧神话中的神名来命名的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/36421098" target="_blank" rel="noopener">12月份的英文</a></p><p><a href="https://zhuanlan.zhihu.com/p/36421098" target="_blank" rel="noopener">12月份的英文来历</a></p><p><a href="https://www.douban.com/group/topic/28393940/" target="_blank" rel="noopener">英文星期的来历</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;月份&quot;&gt;&lt;a href=&quot;#月份&quot; class=&quot;headerlink&quot; title=&quot;月份&quot;&gt;&lt;/a&gt;月份&lt;/h1&gt;&lt;p&gt;公历一年有12个月，公历起源于古罗马历法。罗马的英语原本只有10个月，古罗马皇帝决定增加两个月至末尾，后来的凯撒大帝&lt;code&gt;Gaius </summary>
      
    
    
    
    <category term="分类" scheme="http://yoursite.com/categories/%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>testing</title>
    <link href="http://yoursite.com/2020/07/09/testing/"/>
    <id>http://yoursite.com/2020/07/09/testing/</id>
    <published>2020-07-09T09:32:06.000Z</published>
    <updated>2020-07-10T05:18:26.228Z</updated>
    
    <content type="html"><![CDATA[<p>分组转发是网络核心部分的重要功能</p><p>路由器是 实现分组交换关键构建，存储和转发</p><h6 id="核心部分最核心功能：交换"><a href="#核心部分最核心功能：交换" class="headerlink" title="核心部分最核心功能：交换"></a>核心部分最核心功能：交换</h6><p>电话数量增多，使用交换机完成简</p><p>分组交换网以 分组 作为数据传输单元 依次发送到服务端</p><p>分组首部含有地址（目的地址和原源地址）   </p><p>分组 独立地选择传输路径</p><p>路由器处理分组过程：把收到的分组暂存； 查找转发表；转发</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;分组转发是网络核心部分的重要功能&lt;/p&gt;
&lt;p&gt;路由器是 实现分组交换关键构建，存储和转发&lt;/p&gt;
&lt;h6 id=&quot;核心部分最核心功能：交换&quot;&gt;&lt;a href=&quot;#核心部分最核心功能：交换&quot; class=&quot;headerlink&quot; title=&quot;核心部分最核心功能：交换&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="分类测试" scheme="http://yoursite.com/categories/%E5%88%86%E7%B1%BB%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="testing1" scheme="http://yoursite.com/tags/testing1/"/>
    
    <category term="tesing2" scheme="http://yoursite.com/tags/tesing2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/07/08/hello-world/"/>
    <id>http://yoursite.com/2020/07/08/hello-world/</id>
    <published>2020-07-08T13:18:46.665Z</published>
    <updated>2020-07-08T13:18:46.666Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.</summary>
      
    
    
    
    
  </entry>
  
</feed>
